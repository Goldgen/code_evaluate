package com.ce.model.second;

import com.jfinal.plugin.activerecord.ActiveRecordPlugin;

/**
 * Generated by JFinal, do not modify this file.
 * <pre>
 * Example:
 * public void configPlugin(Plugins me) {
 *     ActiveRecordPlugin arp = new ActiveRecordPlugin(...);
 *     _MappingKit.mapping(arp);
 *     me.add(arp);
 * }
 * </pre>
 */
public class _MappingKit {
	
	public static void mapping(ActiveRecordPlugin arp) {
		arp.addMapping("action", "actionId", Action.class);
		arp.addMapping("admin", "adminId", Admin.class);
		arp.addMapping("assignment", "assignmentId", Assignment.class);
		arp.addMapping("city", "cityId", City.class);
		arp.addMapping("class", "classId", Class.class);
		// Composite Primary Key order: classId_a,classId_b
		arp.addMapping("class_share", "classId_a,classId_b", ClassShare.class);
		// Composite Primary Key order: classId,userId
		arp.addMapping("class_tutor", "classId,userId", ClassTutor.class);
		arp.addMapping("course", "courseId", Course.class);
		// Composite Primary Key order: courseId_a,courseId_b
		arp.addMapping("course_share", "courseId_a,courseId_b", CourseShare.class);
		// Composite Primary Key order: courseId,sourceId
		arp.addMapping("course_source", "courseId,sourceId", CourseSource.class);
		// Composite Primary Key order: courseId,topicId
		arp.addMapping("course_topic", "courseId,topicId", CourseTopic.class);
		arp.addMapping("depart", "departId", Depart.class);
		// Composite Primary Key order: dormId,userId
		arp.addMapping("dorm", "dormId,userId", Dorm.class);
		// Composite Primary Key order: friendId,userId
		arp.addMapping("friend", "friendId,userId", Friend.class);
		arp.addMapping("notice", "id", Notice.class);
		arp.addMapping("password_reset_token", "id", PasswordResetToken.class);
		arp.addMapping("ppt", "pptId", Ppt.class);
		arp.addMapping("province", "provinceId", Province.class);
		arp.addMapping("request", "id", Request.class);
		arp.addMapping("source", "sourceId", Source.class);
		// Composite Primary Key order: sourceId,userId
		arp.addMapping("source_score", "sourceId,userId", SourceScore.class);
		arp.addMapping("sourcereply", "replyId", Sourcereply.class);
		// Composite Primary Key order: path,replyId
		arp.addMapping("sourcereply_file", "path,replyId", SourcereplyFile.class);
		arp.addMapping("status", "statusId", Status.class);
		arp.addMapping("statusReply", "replyId", StatusReply.class);
		// Composite Primary Key order: path,statusId
		arp.addMapping("status_file", "path,statusId", StatusFile.class);
		// Composite Primary Key order: path,replyId
		arp.addMapping("statusreply_file", "path,replyId", StatusreplyFile.class);
		// Composite Primary Key order: assignmentId,userId
		arp.addMapping("student_assignment", "assignmentId,userId", StudentAssignment.class);
		// Composite Primary Key order: classId,userId
		arp.addMapping("student_class", "classId,userId", StudentClass.class);
		arp.addMapping("term", "termId", Term.class);
		arp.addMapping("token", "id", Token.class);
		arp.addMapping("topic", "topicId", Topic.class);
		// Composite Primary Key order: path,topicId
		arp.addMapping("topic_file", "path,topicId", TopicFile.class);
		arp.addMapping("topicreply", "replyId", Topicreply.class);
		// Composite Primary Key order: path,replyId
		arp.addMapping("topicreply_file", "path,replyId", TopicreplyFile.class);
		// Composite Primary Key order: homelandP,userId
		arp.addMapping("user", "homelandP,userId", User.class);
		// Composite Primary Key order: userId,visitorId
		arp.addMapping("visitor", "userId,visitorId", Visitor.class);
	}
}

